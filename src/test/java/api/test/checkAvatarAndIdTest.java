package api.test;

import api.common.Specifications;
import api.model.UserData;
import org.junit.Assert;
import org.junit.Test;
import java.util.List;
import java.util.stream.Collectors;
impot
import static io.restassured.RestAssured.given;

@Test
public void checkAvatarAndIdTest() {
    Specifications.installSpecification(Specifications.requestSpec(URL), Specifications.responseSpecOK200());
    List<UserData> users = given()
            .when()
            .get("api/users?page=2")
            .then().log().all()
            .extract().body().jsonPath().getList("data", UserData.class);

    users.forEach(x-> Assert.assertTrue("", x.getAvatar().contains(x.getId().toString())));

    // users — это коллекция (например, список), содержащая объекты пользователей.
    // Метод forEach применяется к этой коллекции и позволяет выполнить указанное действие для каждого элемента в коллекции.
    // x -> ...: Это лямбда-выражение, которое представляет собой функциональный интерфейс и используется для обработки каждого элемента коллекции users. В данном случае x — это переменная, которая будет представлять текущий элемент (объект пользователя) в итерации.
    // Assert.assertTrue — это метод, используемый для проверки условного выражения. Если выражение возвращает true, тест проходит. Если false, тест завершается с ошибкой. Метод обычно используется в тестах для проверки ожидаемого поведения.
    // "" - Это пустая строка, которая передается в качестве первого аргумента в Assert.assertTrue. Обычно здесь можно указать сообщение об ошибке, которое будет выведено, если условие не выполняется. В данном случае сообщение отсутствует.
    // x.getAvatar() - Этот метод вызывается для объекта x (пользователя) и, предположительно, возвращает строку, представляющую аватар пользователя (например, URL изображения).
    // x.getId().toString() - Здесь вызывается метод getId() для объекта x, который возвращает идентификатор пользователя. Метод toString() преобразует этот идентификатор в строку.
    // x.getAvatar().contains(x.getId().toString()) - Это условие проверяет, содержится ли строка, представляющая идентификатор пользователя, в строке, представляющей аватар. Если идентификатор содержится в аватаре, выражение возвращает true, иначе false.
    // Таким образом, вся строка кода выполняет следующие действия:
    //Для каждого пользователя в коллекции users: Проверяет, содержит ли строка аватара (полученная с помощью getAvatar()) идентификатор пользователя (полученный с помощью getId(), преобразованный в строку).
    //Если условие не выполняется для какого-либо пользователя, тест завершится неудачно с ошибкой.
    //В итоге, код проверяет, что для каждого пользователя аватар содержит его идентификатор.

    Assert.assertTrue(users.stream().allMatch(x->x.getEmail().endsWith("@reqres.in")));

    //users: Это переменная, которая, скорее всего, представляет собой коллекцию объектов (например, список пользователей). Каждый объект в этой коллекции, по всей видимости, имеет метод getEmail(), который возвращает адрес электронной почты.
    //
    //users.stream(): Этот метод создает поток (stream) из коллекции users. Потоки в Java позволяют выполнять операции над элементами коллекции в функциональном стиле. Они предоставляют различные методы для обработки данных, такие как фильтрация, преобразование и агрегация.
    //
    //allMatch(...): Это метод потока, который проверяет, удовлетворяют ли все элементы потока заданному условию (представленному в виде предиката). Если хотя бы один элемент не удовлетворяет условию, метод вернет false; если все элементы соответствуют, он вернет true.
    //
    //x -> x.getEmail().endsWith("@reqres.in"): Это лямбда-выражение, которое задает условие для метода allMatch. Здесь x — это текущий элемент потока (текущий пользователь). Метод getEmail() вызывается для получения адреса электронной почты пользователя, а затем вызывается метод endsWith("@reqres.in"), который проверяет, заканчивается ли адрес электронной почты на строку @reqres.in.
    //
    //Assert.assertTrue(...): Это метод из библиотеки JUnit (или другой библиотеки для тестирования), который проверяет, что условие, переданное в качестве аргумента, истинно (true). Если условие ложно (false), тест завершится с ошибкой. В данном случае он проверяет, что все пользователи имеют адреса электронной почты, заканчивающиеся на @reqres.in.
    //
    //Теперь, собрав все части вместе, код проверяет, что все пользователи в коллекции users имеют адреса электронной почты, которые заканчиваются на @reqres.in. Если хотя бы один пользователь не соответствует этому условию, тест не пройдет.

    List<String> avatars = users.stream().map(UserData::getAvatar).collect(Collectors.toList());

    //users: Это переменная, которая, предположительно, является коллекцией (например, списком) объектов типа UserData. Каждый объект UserData представляет собой некоторую информацию о пользователе.
    //
    //users.stream(): Метод stream() вызывается на коллекции users. Это преобразует коллекцию в поток (Stream) элементов. Поток позволяет выполнять операции над элементами коллекции, такие как фильтрация, преобразование и сбор.
    //
    //.map(UserData::getAvatar): Метод map() используется для преобразования каждого элемента потока. В данном случае используется ссылка на метод UserData::getAvatar, которая указывает на метод getAvatar() класса UserData. Этот метод должен возвращать строку (String), представляющую аватар пользователя. Таким образом, для каждого объекта UserData в потоке будет вызван метод getAvatar(), и в результате получится новый поток строк, представляющих аватары пользователей.
    //
    //.collect(Collectors.toList()): Метод collect() собирает элементы потока в коллекцию. В данном случае используется Collectors.toList(), который собирает элементы потока в список (List). Результат этой операции — это список строк, в котором хранятся аватары пользователей.
    //
    //List<String> avatars: В конечном итоге результат всей цепочки операций (список аватаров) присваивается переменной avatars, которая имеет тип List<String>, то есть это список строк.
    //
    //Таким образом, весь код выполняет следующие действия:
    //
    //Извлекает аватары всех пользователей из коллекции users.
    //Собирает их в список строк.
    //Результат сохраняется в переменной avatars.

    List<String> ids = users.stream().map(x->x.getId().toString()).collect(Collectors.toList());

    for (int i = 0; i < avatars.size(); i++) {
        Assert.assertTrue(avatars.get(i).contains(ids.get(i)));
    }

    //1. Создание списка идентификаторов
    //
    //List<String> ids = users.stream().map(x -> x.getId().toString()).collect(Collectors.toList());
    //users.stream():
    //
    //Здесь мы создаем поток (stream) из коллекции users, которая, предположительно, представляет собой список пользователей (например, List<User>).
    //.map(x -> x.getId().toString()):
    //
    //Метод map применяется к каждому элементу потока.
    //x представляет собой текущий объект пользователя в потоке.
    //x.getId() вызывает метод getId() на объекте x, чтобы получить его идентификатор (обычно это какой-то уникальный идентификатор, например, Long или Integer).
    //Метод toString() преобразует идентификатор в строку (String).
    //В результате на выходе мы получаем поток строк, представляющих идентификаторы пользователей.
    //.collect(Collectors.toList()):
    //
    //Этот метод собирает элементы потока в новую коллекцию.
    //В данном случае, мы собираем их в список (List<String>).
    //Таким образом, переменная ids будет содержать список строк, представляющих идентификаторы пользователей.
    //2. Цикл проверки наличия идентификаторов в аватарах
    //
    //for (int i = 0; i < avatars.size(); i++) {
    //    Assert.assertTrue(avatars.get(i).contains(ids.get(i)));
    //}
    //for (int i = 0; i < avatars.size(); i++):
    //
    //Здесь мы начинаем цикл, который проходит по всем элементам списка avatars.
    //avatars предположительно является списком строк (например, List<String>), где каждая строка может представлять информацию об аватаре.
    //Assert.assertTrue(avatars.get(i).contains(ids.get(i))):
    //
    //avatars.get(i) получает элемент i из списка avatars.
    //ids.get(i) получает элемент i из списка ids, который мы создали ранее.
    //Метод contains проверяет, содержится ли строка, представляющая идентификатор пользователя (из списка ids), в строке аватара (из списка avatars).
    //Assert.assertTrue(...) проверяет, истинно ли условие, заданное в скобках. Если условие ложно, будет выброшено исключение, и тест (если это часть теста) будет завершен с ошибкой.
    //Итог
    //В целом, этот код извлекает идентификаторы пользователей, преобразует их в строки и затем проверяет, содержатся ли эти идентификаторы в соответствующих строках аватаров. Если хотя бы одно из условий не выполняется, это приведет к ошибке в тесте.
}


